{
  "name": "Code for Hakodate glossary",
  "tagline": "Code for Hakodate資料 = 勝手に用語集 =",
  "body": "# Welcome to CfH glossary!\r\n\r\n## このページは？\r\nCode for Hakodateに参加したはいいけど\r\n- 会話の内容がわからないことがある\r\n- とくににカタカナ語や略語などの**専門用語がわからない**\r\n\r\nこんな方に、「このページを見てもらえばとりあえず用語が載っていて意味が何となくわかる」ようなページ(になる予定)です。  \r\nブラウザのページ内検索機能(多くのPC版ブラウザは「[Ctrl]キーを押しながら[F]キー」で出る)も便利ですよ！\r\n\r\n## ページのみかた\r\n例えばこんなかんじ\r\n### 専門用語 (せんもんようご)\r\n- わかる人には分かる、わからない人にはとことん分からない、その界隈ではよく使われるが一般にはあまり知られていない言葉。  \r\n    分かれば「なるほどっ」なこともあれば分かっても「で、なにそれ？」なこともよくある、知っているとなぜか使いたくなる魔法。\r\n  \r\nのように、**その言葉 (よみがな)** 形式で書きます。\r\n  \r\n## 目次\r\n- idx1\r\n- idx2\r\n- idx3\r\n- ...\r\n  \r\n  \r\n## ソフトウェア、webサイト、システム\r\n\r\n### git (ギット)\r\n- ファイル、特にプログラムのソースコードの管理に使われるバージョン管理システムのひとつ。\r\n    特に規模が大きなプログラム、多くのファイルに分かれたプログラムともなると編集ミスをしたりバグを埋め込んでしまった、なんてとき「あ～どのファイルのどこを変更したっけ～...」となることが多くなる。さらに複数人での開発となるとなおさら。そこでプログラムフォルダ(リポジトリ)単位でソースコードごとに変更(差分)を編集内容などのコメントとともに記録しておけば「この変更がまずかったかな？」という推測もしやすくなる。gitはこのバージョン管理システムをプログラマに使いやすい形で提供してくれる。  \r\n    たとえば、「一区切りついた。ここで一旦変更を記録しておこう(commit)」、「この変更はまずかった、このひとつ前まで戻そう(checkoutしてrevert)」などが簡単ににできる。  \r\n    ちなみに、このgitはLinuxの生みの親で有名なLinus Torvalds(リーナス・トーバルズ)さんがそれまで使っていたバージョン管理システムが使えなくなった(くわしくは[Wikipedia - git](https://ja.wikipedia.org/wiki/Git)を参照)のを機にそれ以前のバージョン管理システムの欠点を埋めるアイデアを取り入れて開発した。現在最もスタンダードでポピュラーなバージョン管理システムである。\r\n\r\n### GitHub (ギットハブ)\r\n- gitの1機能、「リモートサーバでのリポジトリ管理」の「リモートサーバ」の中でもいま(2016年現在)最も人気なサービス。  \r\n    gitのリモートサーバ機能だけでなくSNS的機能(followers, feeds)もついており、あまり凝っていないサイトならGitHub内で公開出来たりととても便利。ちなみにこのページもGitHubの1機能「GitHub Pages」を使って公開している。  \r\n\r\n### データベース\r\n- (たとえば住所や電話番号など、特に膨大な量の情報を)検索、蓄積しやすいように整理されたデータの集まり。  \r\n    データベースには「オブジェクトデータベース」、「関係(relational:リレーショナル)データベース」などの考え方(種類)があり、「関係データベース」を管理するためのしくみ(データベースを管理するための仕組みを「データベース管理システム(Data Base Management System, DBMS)」という)で有名なのが「[SQL](https://ja.wikipedia.org/wiki/SQL)」(エスキューエル、シーケル)。詳細は先のリンクや検索で。    \r\n    要するに、「後で検索とかできるようにデータをためておいたもの」。\r\n\r\n### スキーマ\r\n- もともとは「図とか図式とか」を表す言葉。(CfHなど情報系？でこの言葉を聞いたときは多分)関係データベースの「構造(概念スキーマ)」、「仕様(内部スキーマ)」のこと。だいたいの場合後者の内部スキーマのことを言っている。  \r\n    データベースを作ったはいいが(A氏)「あのデータどこにあったっけ？検索したいんだが...」(B氏)「知らん、C氏が作ったデータベースだから」(C氏)「えっと...あーたしか......わすれたっすテヘペロ(・ω<)」みたいなことにならないように、データベースを作るときはデータを置く階層の構造、データ内容の記録形式などの「仕様」を決めてから実際のデータを入力していく。この決めた仕様を「スキーマ」という。  \r\n    要するに、「データベースの仕様」。\r\n  \r\n  \r\n## その他\r\n\r\n### Code for xxx (コード・フォー・<地域の名前>)\r\n- その地域の声をききながら「(プログラムなどの)コードによって地域をより良くしていこう」という取り組みをしている非営利団体。  \r\n    Code for Hakodateもこのくくり。もともとは2008年ころに発足した「Code for America(コード・フォー・アメリカ)」から始まり、2013年末には「Code for Japan(...ジャパン)」も出来た。「civic tech(シビック・テック、civic:市民, tech:技術)」、自分たち(civic)の身の回りをテクノロジーの力を借りてよくしていこう、という取り組みを主な活動内容としている。\r\n\r\n### 絶賛編集中！\r\n- ご指摘、追記要望、受け付けています。連絡は@ryo-heyまで。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}